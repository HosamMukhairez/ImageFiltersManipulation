/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DisplayImage.java
 *
 * Created on 16/01/2010, 06:31:50 ุต
 */
package imagemanipulation;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import javax.swing.JFrame;

/**
 *
 * @author eng
 */
public class DisplayImage extends javax.swing.JPanel {

    int x, y;
    Image image;
    BufferedImage bi;
    int WIDTH = 0, HEIGHT = 0; // Size of our example
    Graphics2D g2D;
    MouseEvent me;
    BufferedImage bimg;
    String imageName = "";
    String[] filterNames;
    BufferedImageOp[] filters;
    AffineTransformOp at;
    int degree = 45;
    Graphics gp;
    Graphics2D big;
    boolean fromWhere = true;
    int angle = 0;

    /** Creates new form DisplayImage */
    public DisplayImage(String imgName) {
        try {
            initComponents();
            setBackground(Color.white);
            setSize(450, 400);

            addMouseMotionListener(new MouseMotionHandler());
            imageName = imgName;

            image = getToolkit().getImage(imgName);

            MediaTracker tracker = new MediaTracker(this);
            tracker.addImage(image, 0);
            tracker.waitForAll();

            setHieght();
            setWidth();
           
            bi = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
            big = bi.createGraphics();
            big.drawImage(image, 10, 10, this);

            bimg = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public int getWidth() {
        return WIDTH;
    }

    public int getHeight() {
        return HEIGHT;
    }

    public void setHieght() {
        HEIGHT = (image.getHeight(null) + 30) * 10;
    }

    public void setWidth() {
        WIDTH = (image.getWidth(null) + 30) * 10;
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g2D = (Graphics2D) g;
        g2D.drawImage(bi, x, y, this);
    }

    class MouseMotionHandler extends MouseMotionAdapter {

        public void mouseDragged(MouseEvent e) {
            try {
                fromWhere = true;
                x = e.getX();
                y = e.getY();
                coordinate.setText("x:" + x + "      y:" + y);
                repaint();
            } catch (Exception ee) {
                ee.printStackTrace();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightB = new javax.swing.JButton();
        leftB = new javax.swing.JButton();
        upB = new javax.swing.JButton();
        downB = new javax.swing.JButton();
        coordinate = new javax.swing.JTextField();
        speedRate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        upRightLeft = new javax.swing.JButton();
        upLeftRight = new javax.swing.JButton();
        downRightLeft = new javax.swing.JButton();
        downLeftRight = new javax.swing.JButton();
        rotate = new javax.swing.JButton();

        setLayout(null);

        rightB.setText(">");
        rightB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBActionPerformed(evt);
            }
        });
        add(rightB);
        rightB.setBounds(240, 380, 70, 30);

        leftB.setText("<");
        leftB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBActionPerformed(evt);
            }
        });
        add(leftB);
        leftB.setBounds(140, 380, 70, 30);

        upB.setText("^");
        upB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBActionPerformed(evt);
            }
        });
        add(upB);
        upB.setBounds(200, 330, 50, 50);

        downB.setText("V");
        downB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downBActionPerformed(evt);
            }
        });
        add(downB);
        downB.setBounds(200, 410, 50, 50);

        coordinate.setEditable(false);
        coordinate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        add(coordinate);
        coordinate.setBounds(0, 440, 140, 20);

        speedRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        speedRate.setText("5");
        add(speedRate);
        speedRate.setBounds(430, 440, 60, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Moving speed rate");
        add(jLabel1);
        jLabel1.setBounds(310, 440, 120, 20);

        upRightLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upRightLeftActionPerformed(evt);
            }
        });
        add(upRightLeft);
        upRightLeft.setBounds(250, 360, 20, 20);

        upLeftRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upLeftRightActionPerformed(evt);
            }
        });
        add(upLeftRight);
        upLeftRight.setBounds(180, 360, 20, 20);

        downRightLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downRightLeftActionPerformed(evt);
            }
        });
        add(downRightLeft);
        downRightLeft.setBounds(250, 410, 20, 20);

        downLeftRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downLeftRightActionPerformed(evt);
            }
        });
        add(downLeftRight);
        downLeftRight.setBounds(180, 410, 20, 20);

        rotate.setText("rotate");
        rotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateActionPerformed(evt);
            }
        });
        add(rotate);
        rotate.setBounds(340, 380, 90, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void leftBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() - Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_leftBActionPerformed

    private void rightBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() + Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rightBActionPerformed

    private void upBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            y += bimg.getMinY() - Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_upBActionPerformed

    private void downBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downBActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            y += bimg.getMinY() + Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_downBActionPerformed

    private void upRightLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upRightLeftActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() + Integer.parseInt(speedRate.getText());
            y += bimg.getMinY() - Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_upRightLeftActionPerformed

    private void upLeftRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upLeftRightActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() - Integer.parseInt(speedRate.getText());
            y += bimg.getMinY() - Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_upLeftRightActionPerformed

    private void downLeftRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downLeftRightActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() - Integer.parseInt(speedRate.getText());
            y += bimg.getMinY() + Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_downLeftRightActionPerformed

    private void downRightLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downRightLeftActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = true;
            x += bimg.getMinX() + Integer.parseInt(speedRate.getText());
            y += bimg.getMinY() + Integer.parseInt(speedRate.getText());
            coordinate.setText("x:" + x + "      y:" + y);
            repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_downRightLeftActionPerformed

    private void rotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateActionPerformed
        // TODO add your handling code here:
        try {
            fromWhere = false;
            JFrame f = new JFrame();
            MyRotatePanel s = new MyRotatePanel(imageName);
            f.add(s);
            f.setSize(new Dimension(600, 500));
            f.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rotateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField coordinate;
    private javax.swing.JButton downB;
    private javax.swing.JButton downLeftRight;
    private javax.swing.JButton downRightLeft;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton leftB;
    private javax.swing.JButton rightB;
    private javax.swing.JButton rotate;
    private javax.swing.JTextField speedRate;
    private javax.swing.JButton upB;
    private javax.swing.JButton upLeftRight;
    private javax.swing.JButton upRightLeft;
    // End of variables declaration//GEN-END:variables
}
