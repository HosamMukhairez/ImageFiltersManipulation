/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DemoControls.java
 *
 * Created on 15/01/2010, 06:33:25 ص
 * by eng.hosam84@hotmail.com
 */
package imagemanipulation;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author eng
 */
public class DemoControls extends javax.swing.JPanel {

    Demol demo;

    /** Creates new form DemoControls */
    public DemoControls(Demol demol) {
        try {
            initComponents();
            demo = demol;

            for (int i = 0; i < demo.imgName.length; i++) {
                imgCombo.addItem(demo.imgName[i]);
            }

            for (int i = 0; i < demo.opsName.length; i++) {
                opsCombo.addItem(demo.opsName[i]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public Dimension getPreferredSize() {
        return new Dimension(200, 32);
    }
    public JFileChooser fc = new JFileChooser("");

    public String openFolder() {
        String ret = null;
        int returnVal = 0;
        try {
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            returnVal = fc.showDialog(this, "إستعلام"); //to show JFileChooser
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                return ret = fc.getSelectedFile().getPath();
            } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
        }
        return ret;
    }

    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();

            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);

            out.write(buf);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }

    public String saveFolder(String fromWhere) {
        String ret = null;
        int returnVal = 0;
        try {
            fc.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
            returnVal = fc.showDialog(this, "save image"); //to show JFileChooser
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                return ret = fc.getSelectedFile().getPath();
            } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
        }
        return ret;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browse = new java.awt.Button();
        imgCombo = new java.awt.Choice();
        opsCombo = new java.awt.Choice();
        allEffectsB = new java.awt.Button();
        saveImageB = new java.awt.Button();
        moveImageB = new java.awt.Button();

        setLayout(null);

        browse.setActionCommand("browse");
        browse.setLabel("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });
        add(browse);
        browse.setBounds(10, 10, 58, 24);

        imgCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                imgComboItemStateChanged(evt);
            }
        });
        add(imgCombo);
        imgCombo.setBounds(90, 10, 160, 20);

        opsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                opsComboItemStateChanged(evt);
            }
        });
        add(opsCombo);
        opsCombo.setBounds(270, 10, 110, 20);

        allEffectsB.setLabel("Show more  effects");
        allEffectsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allEffectsBActionPerformed(evt);
            }
        });
        add(allEffectsB);
        allEffectsB.setBounds(390, 10, 120, 24);

        saveImageB.setLabel("Save Image");
        saveImageB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageBActionPerformed(evt);
            }
        });
        add(saveImageB);
        saveImageB.setBounds(520, 10, 80, 24);

        moveImageB.setLabel("Move image");
        moveImageB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveImageBActionPerformed(evt);
            }
        });
        add(moveImageB);
        moveImageB.setBounds(610, 10, 90, 24);
    }// </editor-fold>//GEN-END:initComponents

    private void opsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_opsComboItemStateChanged
        // TODO add your handling code here:
        try {
            demo.opsIndex = opsCombo.getSelectedIndex();
            demo.repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_opsComboItemStateChanged

    private void imgComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_imgComboItemStateChanged
        // TODO add your handling code here:
        try {
            demo.imgIndex = imgCombo.getSelectedIndex();
            System.out.println("demo.imgIndex:" + demo.imgIndex);
            demo.repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_imgComboItemStateChanged

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        try {
            String imagePath = openFolder();
            if (imagePath != null) {
                StringTokenizer divide = new StringTokenizer(imagePath, "\\");
                String name = "";
                while (divide.hasMoreTokens()) {
                    name = divide.nextToken();
                }
                copy(new File(imagePath), new File("images/" + name));
                imgCombo.removeAll();
                demo.setImagesName();
                for (int i = 0; i < demo.imgName.length; i++) {
                    if (!demo.imgName[i].equals("Thumbs.db")) {
                        imgCombo.addItem(demo.imgName[i]);
                    }
                }
                JOptionPane.showMessageDialog(null, "Image added successfully");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_browseActionPerformed

    private void allEffectsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allEffectsBActionPerformed
        // TODO add your handling code here:
        try {
            PanelEffects all = new PanelEffects(imgCombo.getSelectedItem().toString());
            all.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_allEffectsBActionPerformed

    private void saveImageBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageBActionPerformed
        // TODO add your handling code here:
        try {
            StringTokenizer divide = new StringTokenizer(imgCombo.getSelectedItem(), ".");
            String name = divide.nextToken();
            String ext = divide.nextToken();
            String savePath = saveFolder("");
            if (savePath != null) {
                BufferedImage bi = demo.bimg; // retrieve image
                File outputfile = new File(savePath + "/" + name + "_" + opsCombo.getSelectedItem() + "." + ext);
                ImageIO.write(bi, ext, outputfile);
                JOptionPane.showMessageDialog(null, "Image saved successfully.");
            } else {
            }
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_saveImageBActionPerformed

    private void moveImageBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveImageBActionPerformed
        // TODO add your handling code here:
        try {
            JFrame f = new JFrame();
            DisplayImage s = new DisplayImage("images/" + imgCombo.getSelectedItem());
            f.add(s);
            f.setSize(new Dimension(500, 500));
            f.setResizable(false);
            f.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_moveImageBActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button allEffectsB;
    private java.awt.Button browse;
    private java.awt.Choice imgCombo;
    private java.awt.Button moveImageB;
    private java.awt.Choice opsCombo;
    private java.awt.Button saveImageB;
    // End of variables declaration//GEN-END:variables
}
